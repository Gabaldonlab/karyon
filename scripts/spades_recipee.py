#!/bin/python
import sys, numpy, os.path, re
import argparse
from Bio import SeqIO
'''
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--library_file', help="File containing the library report generated by the script prepare_libraries.py")
    parser.add_argument('-p', '--path', required=True, help="Path de SPAdes")
    parser.add_argument('-n', '--name',  required=True, help="Prefix to use with the output files")
    parser.add_argument('-o', '--output', required=True, help="Output directory")
    parser.add_argument('-c', '--commands', default='', help='User defined commands for SPAdes')
    parser.add_argument('--no_diploid', action='store_true', default=False, help='Launches SPAdes instead of dipSPAdes. Since you are assemblying a hybrid and dipSPAdes already launches SPAdes, this option is turned off by default')
args = parser.parse_args()
'''

def call_SPAdes(library_file, path, output, name, commands, no_diploid, memory_limit, nodes):
	libstring = ' '
	backstring = ''
	for i in open(library_file):
		chunk = i.split()
		if chunk[5] == "1":
			libstring = libstring + "-1 " + os.path.abspath(chunk[0]) + " -2 " + os.path.abspath(chunk[6]) + " "
		elif chunk[5] == "2": continue
		else: backstring = backstring + os.path.abspath(chunk[5]) + " " + os.path.abspath(chunk[0]) + " "
	libstring = libstring + backstring
	
	outputfile = open(output+name+"_karyon.job", 'w')
	if no_diploid == True:
		outputfile.write("python " + path + "bin/spades.py" + libstring + " -t " + str(nodes) + " -m " +  str(memory_limit) + " " +commands + "-o " + output)
	else:
		outputfile.write("python " + path + "bin/dipspades.py" + libstring + " -t " + str(nodes) + " -m " +  str(memory_limit) + " " +commands + "-o " + output)
	outputfile.write("\n")
	outputfile.close()

#~ call_SPAdes(args.library_file, args.path, args.output, args.name, args.commands)
